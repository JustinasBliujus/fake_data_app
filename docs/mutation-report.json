{"files":{"routes/generator/generate_info.js":{"language":"javascript","mutants":[{"id":"37","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":31},"start":{"column":13,"line":31}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":82},"start":{"column":37,"line":79}}},{"id":"72","mutatorName":"ArithmeticOperator","replacement":"height * 0.9 * totalHeight","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":80},"start":{"column":17,"line":80}}},{"id":"73","mutatorName":"ArithmeticOperator","replacement":"height / 0.9","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":80},"start":{"column":18,"line":80}}},{"id":"74","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":81},"start":{"column":35,"line":81}}},{"id":"75","mutatorName":"ArithmeticOperator","replacement":"size / scale","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":81},"start":{"column":43,"line":81}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"album\": \"Abbey Road\",\n-   \"artist\": \"The Beatles\",\n+   \"artist\": undefined,\n    \"company\": \"Apple Records\",\n    \"genre\": \"Rock\",\n    \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n    \"title\": \"Come Together\",\n  }\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":14},"start":{"column":9,"line":12}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toMatch(expected)\n\nMatcher error: received value must be a string\n\nReceived has value: undefined\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":6,"line":22},"start":{"column":13,"line":14}}},{"id":"6","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\nExpected: {\"album\": \"Abbey Road\", \"artist\": \"The Beatles\", \"company\": \"Apple Records\", \"genre\": \"Rock\", \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\", \"title\": \"Come Together\"}\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":56},"start":{"column":63,"line":10}}},{"id":"9","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"TypeError: person.split is not a function\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:74:34)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:152:28)\n    at Promise.then.completed (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":68,"line":15},"start":{"column":24,"line":15}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"TypeError: person.split is not a function\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:74:34)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:152:28)\n    at Promise.then.completed (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":68,"line":15},"start":{"column":24,"line":15}}},{"id":"11","mutatorName":"LogicalOperator","replacement":"fakerInstance.person.fullName() && 'Unknown'","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"Unknown Studio Records\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":68,"line":15},"start":{"column":24,"line":15}}},{"id":"12","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"Unknown\"\nReceived string:    \" Music\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:175:29)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":68,"line":15},"start":{"column":59,"line":15}}},{"id":"13","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"J Studio Records\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":43,"line":16},"start":{"column":40,"line":16}}},{"id":"14","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["2","3","4","18"],"location":{"end":{"column":47,"line":17},"start":{"column":28,"line":17}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["2","3","4","18"],"location":{"end":{"column":47,"line":17},"start":{"column":28,"line":17}}},{"id":"16","mutatorName":"EqualityOperator","replacement":"Math.random() <= 0.5","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["2","3","4","18"],"location":{"end":{"column":47,"line":17},"start":{"column":28,"line":17}}},{"id":"17","mutatorName":"EqualityOperator","replacement":"Math.random() >= 0.5","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["2","3","4","18"],"location":{"end":{"column":47,"line":17},"start":{"column":28,"line":17}}},{"id":"18","mutatorName":"ArithmeticOperator","replacement":"nameParts.length + 1","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Madonna Music\"\nReceived: \"undefined Music\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:452:29)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["18"],"coveredBy":["4","18"],"location":{"end":{"column":95,"line":17},"start":{"column":75,"line":17}}},{"id":"19","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["2","3","4","18"],"location":{"end":{"column":70,"line":18},"start":{"column":52,"line":18}}},{"id":"20","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"John \"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":62,"line":19},"start":{"column":41,"line":19}}},{"id":"21","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"TypeError: Cannot read properties of undefined (reading '0')\n    at C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:83:267\n    at Array.map (<anonymous>)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:83:42)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:152:28)\n    at Promise.then.completed (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at _runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at _runTestsForDescribeBlock (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\node_modules\\jest-runner\\build\\runTest.js:444:34)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":95,"line":19},"start":{"column":64,"line":19}}},{"id":"22","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"Smith  \"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":82,"line":20},"start":{"column":46,"line":20}}},{"id":"23","mutatorName":"ArithmeticOperator","replacement":"w[0].toUpperCase() - w.slice(1)","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"Smith NaN NaN\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":82,"line":20},"start":{"column":51,"line":20}}},{"id":"24","mutatorName":"MethodExpression","replacement":"w[0].toLowerCase()","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"John studio records\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":69,"line":20},"start":{"column":51,"line":20}}},{"id":"25","mutatorName":"MethodExpression","replacement":"w","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"Smith Sstudio Rrecords\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":82,"line":20},"start":{"column":72,"line":20}}},{"id":"26","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"Smith StudioRecords\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":92,"line":20},"start":{"column":89,"line":20}}},{"id":"27","mutatorName":"StringLiteral","replacement":"``","statusReason":"Error: expect(received).toMatch(expected)\n\nExpected pattern: /^(John|Smith) Studio Records$/\nReceived string:  \"\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:155:29)","status":"Killed","static":false,"testsCompleted":4,"killedBy":["2"],"coveredBy":["2","3","4","18"],"location":{"end":{"column":48,"line":21},"start":{"column":18,"line":21}}},{"id":"28","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":103,"line":24},"start":{"column":49,"line":24}}},{"id":"29","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n@@ -1,7 +1,7 @@\n  Object {\n-   \"album\": \"Abbey Road\",\n+   \"album\": undefined,\n    \"artist\": \"The Beatles\",\n    \"company\": \"Apple Records\",\n    \"genre\": \"Rock\",\n    \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n    \"title\": \"Come Together\",\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":28},"start":{"column":9,"line":26}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":6,"line":32},"start":{"column":13,"line":28}}},{"id":"31","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: true\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":28,"line":31},"start":{"column":13,"line":30}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: false\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":28,"line":31},"start":{"column":13,"line":30}}},{"id":"33","mutatorName":"LogicalOperator","replacement":"Array.from({\n  length: countAlbum\n}, () => fakerInstance.word.noun()).join(' ') && 'Unknown Album'","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: \"Unknown Album\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":28,"line":31},"start":{"column":13,"line":30}}},{"id":"34","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: \"Unknown Album\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":46,"line":30},"start":{"column":24,"line":30}}},{"id":"35","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: \"  \"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":79,"line":30},"start":{"column":48,"line":30}}},{"id":"36","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"summer night dreams\"\nReceived: \"summernightdreams\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:218:28)","status":"Killed","static":false,"testsCompleted":3,"killedBy":["5"],"coveredBy":["5","6","7"],"location":{"end":{"column":89,"line":30},"start":{"column":86,"line":30}}},{"id":"38","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"album\": \"Abbey Road\",\n    \"artist\": \"The Beatles\",\n    \"company\": \"Apple Records\",\n-   \"genre\": \"Rock\",\n+   \"genre\": undefined,\n    \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n    \"title\": \"Come Together\",\n  }\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":37},"start":{"column":9,"line":35}}},{"id":"39","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"electronic\"\nReceived: undefined\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:276:28)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["8","9"],"location":{"end":{"column":6,"line":39},"start":{"column":13,"line":37}}},{"id":"40","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"electronic\"\nReceived: true\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:276:28)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["8","9"],"location":{"end":{"column":66,"line":38},"start":{"column":17,"line":38}}},{"id":"41","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"electronic\"\nReceived: false\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:276:28)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["8","9"],"location":{"end":{"column":66,"line":38},"start":{"column":17,"line":38}}},{"id":"42","mutatorName":"LogicalOperator","replacement":"fakerInstance.word.adjective() && 'Unknown Genre'","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"electronic\"\nReceived: \"Unknown Genre\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:276:28)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["8"],"coveredBy":["8","9"],"location":{"end":{"column":66,"line":38},"start":{"column":17,"line":38}}},{"id":"43","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Unknown Genre\"\nReceived: \"\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:293:28)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":66,"line":38},"start":{"column":51,"line":38}}},{"id":"44","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":103,"line":41},"start":{"column":49,"line":41}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","statusReason":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at createImageWithTitle (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:177:115)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:157:23)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:105:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":45},"start":{"column":9,"line":43}}},{"id":"46","mutatorName":"BlockStatement","replacement":"{}","statusReason":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at createImageWithTitle (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:177:115)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:157:23)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:310:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10","11"],"location":{"end":{"column":6,"line":47},"start":{"column":13,"line":45}}},{"id":"47","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"TypeError: info.title.toUpperCase is not a function\n    at createImageWithTitle (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:177:115)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:157:23)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:310:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10","11"],"location":{"end":{"column":67,"line":46},"start":{"column":17,"line":46}}},{"id":"48","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"TypeError: info.title.toUpperCase is not a function\n    at createImageWithTitle (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:177:115)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:157:23)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:310:22)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10","11"],"location":{"end":{"column":67,"line":46},"start":{"column":17,"line":46}}},{"id":"49","mutatorName":"LogicalOperator","replacement":"fakerInstance.word.words(countTitle) && 'Untitled'","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"amazing beautiful melody\"\nReceived: \"Untitled\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:312:28)","status":"Killed","static":false,"testsCompleted":2,"killedBy":["10"],"coveredBy":["10","11"],"location":{"end":{"column":67,"line":46},"start":{"column":17,"line":46}}},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"Untitled\"\nReceived: \"\"\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:330:28)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11"],"location":{"end":{"column":67,"line":46},"start":{"column":57,"line":46}}},{"id":"51","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"TypeError: Cannot read properties of undefined (reading 'toUpperCase')\n    at createImageWithTitle (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:177:115)\n    at generateInfo (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\routes\\generator\\generate_info.js:157:23)\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:105:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":65,"line":52},"start":{"column":18,"line":52}}},{"id":"52","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 8\n+ Received  + 1\n\n- Object {\n-   \"album\": \"Abbey Road\",\n-   \"artist\": \"The Beatles\",\n-   \"company\": \"Apple Records\",\n-   \"genre\": \"Rock\",\n-   \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n-   \"title\": \"Come Together\",\n- }\n+ Object {}\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":41,"line":55},"start":{"column":12,"line":55}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"album\": \"Abbey Road\",\n    \"artist\": \"The Beatles\",\n    \"company\": \"Apple Records\",\n    \"genre\": \"Rock\",\n-   \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n+   \"image\": undefined,\n    \"title\": \"Come Together\",\n  }\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":2,"line":107},"start":{"column":53,"line":58}}},{"id":"54","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":39,"line":62},"start":{"column":35,"line":62}}},{"id":"55","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":38,"line":66},"start":{"column":21,"line":66}}},{"id":"56","mutatorName":"MethodExpression","replacement":"info.title.toLowerCase()","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":43,"line":69},"start":{"column":19,"line":69}}},{"id":"57","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":53,"line":69},"start":{"column":50,"line":69}}},{"id":"58","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":83,"line":73},"start":{"column":31,"line":73}}},{"id":"59","mutatorName":"MethodExpression","replacement":"Math.min(minFont, maxFont - word.length * 5)","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":83,"line":73},"start":{"column":39,"line":73}}},{"id":"60","mutatorName":"ArithmeticOperator","replacement":"maxFont + word.length * 5","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":82,"line":73},"start":{"column":57,"line":73}}},{"id":"61","mutatorName":"ArithmeticOperator","replacement":"word.length / 5","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":82,"line":73},"start":{"column":67,"line":73}}},{"id":"62","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":57,"line":75},"start":{"column":39,"line":75}}},{"id":"63","mutatorName":"ArithmeticOperator","replacement":"size / 1.2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":57,"line":75},"start":{"column":47,"line":75}}},{"id":"64","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":63,"line":76},"start":{"column":44,"line":76}}},{"id":"65","mutatorName":"ArithmeticOperator","replacement":"sum - h","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":63,"line":76},"start":{"column":56,"line":76}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":35,"line":79},"start":{"column":9,"line":79}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":35,"line":79},"start":{"column":9,"line":79}}},{"id":"68","mutatorName":"EqualityOperator","replacement":"totalHeight >= height * 0.9","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":35,"line":79},"start":{"column":9,"line":79}}},{"id":"69","mutatorName":"EqualityOperator","replacement":"totalHeight <= height * 0.9","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":35,"line":79},"start":{"column":9,"line":79}}},{"id":"70","mutatorName":"ArithmeticOperator","replacement":"height / 0.9","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":35,"line":79},"start":{"column":23,"line":79}}},{"id":"76","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":65,"line":84},"start":{"column":47,"line":84}}},{"id":"77","mutatorName":"ArithmeticOperator","replacement":"size / 1.2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":65,"line":84},"start":{"column":55,"line":84}}},{"id":"78","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":79,"line":85},"start":{"column":60,"line":85}}},{"id":"79","mutatorName":"ArithmeticOperator","replacement":"sum - h","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":79,"line":85},"start":{"column":72,"line":85}}},{"id":"80","mutatorName":"ArithmeticOperator","replacement":"(height - adjustedTotalHeight) * 2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":47,"line":86},"start":{"column":13,"line":86}}},{"id":"81","mutatorName":"ArithmeticOperator","replacement":"height + adjustedTotalHeight","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":86},"start":{"column":14,"line":86}}},{"id":"82","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":27,"line":88},"start":{"column":21,"line":88}}},{"id":"83","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":29,"line":89},"start":{"column":21,"line":89}}},{"id":"84","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":37,"line":91},"start":{"column":21,"line":91}}},{"id":"85","mutatorName":"EqualityOperator","replacement":"i <= words.length","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":37,"line":91},"start":{"column":21,"line":91}}},{"id":"86","mutatorName":"EqualityOperator","replacement":"i >= words.length","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":37,"line":91},"start":{"column":21,"line":91}}},{"id":"87","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"Hit limit reached (2419/2400)","status":"Timeout","static":false,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":42,"line":91},"start":{"column":39,"line":91}}},{"id":"88","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":6,"line":97},"start":{"column":44,"line":91}}},{"id":"89","mutatorName":"StringLiteral","replacement":"``","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":43,"line":94},"start":{"column":20,"line":94}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"width * 2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":37,"line":95},"start":{"column":28,"line":95}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"y - size","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":47,"line":95},"start":{"column":39,"line":95}}},{"id":"92","mutatorName":"AssignmentOperator","replacement":"y -= size * 1.2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":24,"line":96},"start":{"column":9,"line":96}}},{"id":"93","mutatorName":"ArithmeticOperator","replacement":"size / 1.2","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":24,"line":96},"start":{"column":14,"line":96}}},{"id":"94","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- StringContaining \"public\\\\covers\\\\456_7\",\n+ \"C:\\\\Users\\\\justa\\\\Documents\\\\0x\\\\Stud\\\\4th1st\\\\PSK\\\\Laborai\\\\3\\\\fake_data_app\\\\.stryker-tmp\\\\sandbox-jxFawA\\\\covers\\\\456_7\",\n  {\"recursive\": true},\n\nNumber of calls: 1\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:345:25)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["12"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":56,"line":99},"start":{"column":48,"line":99}}},{"id":"95","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- StringContaining \"public\\\\covers\\\\456_7\",\n+ \"C:\\\\Users\\\\justa\\\\Documents\\\\0x\\\\Stud\\\\4th1st\\\\PSK\\\\Laborai\\\\3\\\\fake_data_app\\\\.stryker-tmp\\\\sandbox-jxFawA\\\\public\\\\456_7\",\n  {\"recursive\": true},\n\nNumber of calls: 1\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:345:25)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["12"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":66,"line":99},"start":{"column":58,"line":99}}},{"id":"96","mutatorName":"StringLiteral","replacement":"``","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n- StringContaining \"public\\\\covers\\\\456_7\",\n+ \"C:\\\\Users\\\\justa\\\\Documents\\\\0x\\\\Stud\\\\4th1st\\\\PSK\\\\Laborai\\\\3\\\\fake_data_app\\\\.stryker-tmp\\\\sandbox-jxFawA\\\\public\\\\covers\",\n  {\"recursive\": true},\n\nNumber of calls: 1\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:345:25)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["12"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":85,"line":99},"start":{"column":68,"line":99}}},{"id":"97","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  \"C:\\\\Users\\\\justa\\\\Documents\\\\0x\\\\Stud\\\\4th1st\\\\PSK\\\\Laborai\\\\3\\\\fake_data_app\\\\.stryker-tmp\\\\sandbox-jxFawA\\\\public\\\\covers\\\\456_7\",\n- Object {\n-   \"recursive\": true,\n- }\n+ Object {},\n\nNumber of calls: 1\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:345:25)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["12"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":50,"line":100},"start":{"column":31,"line":100}}},{"id":"98","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n- Expected\n+ Received\n\n  \"C:\\\\Users\\\\justa\\\\Documents\\\\0x\\\\Stud\\\\4th1st\\\\PSK\\\\Laborai\\\\3\\\\fake_data_app\\\\.stryker-tmp\\\\sandbox-jxFawA\\\\public\\\\covers\\\\456_7\",\n  Object {\n-   \"recursive\": true,\n+   \"recursive\": false,\n  },\n\nNumber of calls: 1\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:345:25)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["12"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":48,"line":100},"start":{"column":44,"line":100}}},{"id":"99","mutatorName":"StringLiteral","replacement":"``","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"album\": \"Abbey Road\",\n    \"artist\": \"The Beatles\",\n    \"company\": \"Apple Records\",\n    \"genre\": \"Rock\",\n-   \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n+   \"image\": \"/covers/123_1/\",\n    \"title\": \"Come Together\",\n  }\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":47,"line":102},"start":{"column":22,"line":102}}},{"id":"100","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":62,"line":104},"start":{"column":50,"line":104}}},{"id":"101","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":19,"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":80,"line":104},"start":{"column":64,"line":104}}},{"id":"102","mutatorName":"StringLiteral","replacement":"``","statusReason":"Error: expect(received).toEqual(expected) // deep equality\n\n- Expected  - 1\n+ Received  + 1\n\n  Object {\n    \"album\": \"Abbey Road\",\n    \"artist\": \"The Beatles\",\n    \"company\": \"Apple Records\",\n    \"genre\": \"Rock\",\n-   \"image\": StringContaining \"/covers/123_1/cover_1234567890.jpg\",\n+   \"image\": \"\",\n    \"title\": \"Come Together\",\n  }\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:107:22)","status":"Killed","static":false,"testsCompleted":19,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"],"location":{"end":{"column":49,"line":106},"start":{"column":12,"line":106}}},{"id":"0","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"max\": Any<Number>, \"min\": Any<Number>}\nReceived\n       1: {\"max\": true, \"min\": 1}\n       2: {\"max\": true, \"min\": 1}\n\nNumber of calls: 2\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:256:36)","status":"Killed","static":true,"testsCompleted":19,"killedBy":["7"],"coveredBy":[],"location":{"end":{"column":71,"line":7},"start":{"column":29,"line":7}}},{"id":"1","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"max\": Any<Number>, \"min\": Any<Number>}\nReceived\n       1: {\"max\": false, \"min\": 1}\n       2: {\"max\": false, \"min\": 1}\n\nNumber of calls: 2\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:256:36)","status":"Killed","static":true,"testsCompleted":19,"killedBy":["7"],"coveredBy":[],"location":{"end":{"column":71,"line":7},"start":{"column":29,"line":7}}},{"id":"2","mutatorName":"LogicalOperator","replacement":"parseInt(process.env.TITLE_ALBUM_MAX) && 3","status":"Survived","static":true,"testsCompleted":19,"coveredBy":[],"location":{"end":{"column":71,"line":7},"start":{"column":29,"line":7}}},{"id":"3","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"max\": Any<Number>, \"min\": Any<Number>}\nReceived\n       1: {\"max\": 3, \"min\": true}\n       2: {\"max\": 3, \"min\": true}\n\nNumber of calls: 2\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:256:36)","status":"Killed","static":true,"testsCompleted":19,"killedBy":["7"],"coveredBy":[],"location":{"end":{"column":71,"line":8},"start":{"column":29,"line":8}}},{"id":"4","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\nExpected: ObjectContaining {\"max\": Any<Number>, \"min\": Any<Number>}\nReceived\n       1: {\"max\": 3, \"min\": false}\n       2: {\"max\": 3, \"min\": false}\n\nNumber of calls: 2\n    at Object.<anonymous> (C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app\\.stryker-tmp\\sandbox-jxFawA\\__tests__\\generate_info.test.js:256:36)","status":"Killed","static":true,"testsCompleted":19,"killedBy":["7"],"coveredBy":[],"location":{"end":{"column":71,"line":8},"start":{"column":29,"line":8}}},{"id":"5","mutatorName":"LogicalOperator","replacement":"parseInt(process.env.TITLE_ALBUM_MIN) && 1","status":"Survived","static":true,"testsCompleted":19,"coveredBy":[],"location":{"end":{"column":71,"line":8},"start":{"column":29,"line":8}}}],"source":"import dotenv from 'dotenv';\r\ndotenv.config();\r\nimport { createCanvas, loadImage } from 'canvas';\r\nimport fs from 'fs/promises';\r\nimport path from 'path';\r\n\r\nconst TITLE_AND_ALBUM_MAX = parseInt(process.env.TITLE_ALBUM_MAX) || 3;\r\nconst TITLE_AND_ALBUM_MIN = parseInt(process.env.TITLE_ALBUM_MIN) || 1;\r\n\r\nexport async function generateInfo(fakerInstance, seed, page) {\r\n    let artist;\r\n    try {\r\n        artist = fakerInstance.music.artist();\r\n    } catch {\r\n        const person = fakerInstance.person.fullName() || 'Unknown';\r\n        const nameParts = person.split(' ');\r\n        const chosenName = Math.random() < 0.5 ? nameParts[0] : nameParts[nameParts.length - 1];\r\n        const wordCount = fakerInstance.number.int({ min: 1, max: 2 });\r\n        const companyWords = Array.from({ length: wordCount }, () => fakerInstance.word.noun());\r\n        const companyName = companyWords.map(w => w[0].toUpperCase() + w.slice(1)).join(' ');\r\n        artist = `${chosenName} ${companyName}`;\r\n    }\r\n\r\n    const countAlbum = fakerInstance.number.int({ min: TITLE_AND_ALBUM_MIN, max: TITLE_AND_ALBUM_MAX });\r\n    let album;\r\n    try {\r\n        album = fakerInstance.music.album();\r\n    } catch {\r\n        album =\r\n            Array.from({ length: countAlbum }, () => fakerInstance.word.noun()).join(' ') ||\r\n            'Unknown Album';\r\n    }\r\n\r\n    let genre;\r\n    try {\r\n        genre = fakerInstance.music.genre();\r\n    } catch {\r\n        genre = fakerInstance.word.adjective() || 'Unknown Genre';\r\n    }\r\n\r\n    const countTitle = fakerInstance.number.int({ min: TITLE_AND_ALBUM_MIN, max: TITLE_AND_ALBUM_MAX });\r\n    let title;\r\n    try {\r\n        title = fakerInstance.music.songName();\r\n    } catch {\r\n        title = fakerInstance.word.words(countTitle) || 'Untitled';\r\n    }\r\n\r\n    const company = fakerInstance.company.name();\r\n    const image = fakerInstance.image.avatarGitHub(); \r\n\r\n    const info = { artist, company, album, genre, title, image };\r\n    const imagePath = await createImageWithTitle(info, seed, page);\r\n\r\n    return { ...info, image: imagePath };\r\n}\r\n\r\nasync function createImageWithTitle(info,seed,page) {\r\n    const width = 800;\r\n    const height = 800;\r\n    const canvas = createCanvas(width, height);\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const baseImage = await loadImage(info.image);\r\n    ctx.drawImage(baseImage, 0, 0, width, height);\r\n    ctx.fillStyle = 'rgba(0,0,0,0.5)';\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    const words = info.title.toUpperCase().split(' ');\r\n\r\n    const minFont = 40;\r\n    const maxFont = 160;\r\n    let wordSizes = words.map(word => Math.max(minFont, maxFont - word.length * 5));\r\n\r\n    const lineHeights = wordSizes.map(size => size * 1.2);\r\n    const totalHeight = lineHeights.reduce((sum, h) => sum + h, 0);\r\n\r\n    let scale = 1;\r\n    if (totalHeight > height * 0.9) {\r\n        scale = (height * 0.9) / totalHeight;\r\n        wordSizes = wordSizes.map(size => size * scale);\r\n    }\r\n\r\n    const adjustedLineHeights = wordSizes.map(size => size * 1.2);\r\n    const adjustedTotalHeight = adjustedLineHeights.reduce((sum, h) => sum + h, 0);\r\n    let y = (height - adjustedTotalHeight) / 2;\r\n\r\n    ctx.fillStyle = '#fff';\r\n    ctx.textAlign = 'center';\r\n\r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        const size = wordSizes[i];\r\n        ctx.font = `bold ${size}px \"Sans\"`;\r\n        ctx.fillText(word, width / 2, y + size); \r\n        y += size * 1.2;\r\n    }\r\n\r\n    const outputDir = path.join(process.cwd(), 'public', 'covers', `${seed}_${page}`);\r\n    await fs.mkdir(outputDir, { recursive: true });\r\n\r\n    const fileName = `cover_${Date.now()}.jpg`;\r\n    const filePath = path.join(outputDir, fileName);\r\n    await fs.writeFile(filePath, canvas.toBuffer('image/jpeg', { quality: 0.9 }));\r\n\r\n    return `/covers/${seed}_${page}/${fileName}`;\r\n}\r\n\r\n\r\n\r\n\r\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"__tests__/generate_info.test.js":{"tests":[{"id":"0","name":"generateInfo Happy path - all faker methods work should generate complete music info with all faker methods working","location":{"start":{"column":6,"line":96}}},{"id":"1","name":"generateInfo Happy path - all faker methods work should generate different paths for different seeds and pages","location":{"start":{"column":6,"line":121}}},{"id":"2","name":"generateInfo Fallback logic - artist generation should generate artist from person name when music.artist throws","location":{"start":{"column":6,"line":138}}},{"id":"3","name":"generateInfo Fallback logic - artist generation should handle person name with fallback to \"Unknown\"","location":{"start":{"column":6,"line":159}}},{"id":"4","name":"generateInfo Fallback logic - artist generation should randomly choose first or last name for artist","location":{"start":{"column":6,"line":177}}},{"id":"5","name":"generateInfo Fallback logic - album generation should generate album from nouns when music.album throws","location":{"start":{"column":6,"line":198}}},{"id":"6","name":"generateInfo Fallback logic - album generation should handle empty strings from noun generation","location":{"start":{"column":6,"line":220}}},{"id":"7","name":"generateInfo Fallback logic - album generation should respect TITLE_AND_ALBUM_MIN and TITLE_AND_ALBUM_MAX environment variables","location":{"start":{"column":6,"line":240}}},{"id":"8","name":"generateInfo Fallback logic - genre generation should generate genre from adjective when music.genre throws","location":{"start":{"column":6,"line":262}}},{"id":"9","name":"generateInfo Fallback logic - genre generation should use \"Unknown Genre\" when adjective generation fails","location":{"start":{"column":6,"line":279}}},{"id":"10","name":"generateInfo Fallback logic - title generation should generate title from words when music.songName throws","location":{"start":{"column":6,"line":297}}},{"id":"11","name":"generateInfo Fallback logic - title generation should use \"Untitled\" when words generation fails","location":{"start":{"column":6,"line":315}}},{"id":"12","name":"generateInfo Image generation should create image with correct directory structure","location":{"start":{"column":6,"line":334}}},{"id":"13","name":"generateInfo Image generation should write image file with correct format","location":{"start":{"column":6,"line":350}}},{"id":"14","name":"generateInfo Image generation should load and process the GitHub avatar image","location":{"start":{"column":6,"line":366}}},{"id":"15","name":"generateInfo Return value structure should return object with all required properties","location":{"start":{"column":6,"line":381}}},{"id":"16","name":"generateInfo Return value structure should return proper types for all properties","location":{"start":{"column":6,"line":399}}},{"id":"17","name":"generateInfo Edge cases should handle empty string returns from faker","location":{"start":{"column":6,"line":419}}},{"id":"18","name":"generateInfo Edge cases should handle single-word person names in fallback","location":{"start":{"column":6,"line":436}}}],"source":"import { jest } from '@jest/globals';\r\n\r\n// Mock Date.now for predictable timestamps BEFORE importing the module\r\nconst mockDateNow = jest.spyOn(Date, 'now');\r\nmockDateNow.mockReturnValue(1234567890);\r\n\r\n// Mock the canvas module\r\nconst mockToBuffer = jest.fn(() => Buffer.from('fake-image-data'));\r\nconst mockGetContext = jest.fn(() => ({\r\n  drawImage: jest.fn(),\r\n  fillRect: jest.fn(),\r\n  fillText: jest.fn(),\r\n  font: '',\r\n  fillStyle: '',\r\n  textAlign: '',\r\n}));\r\nconst mockCreateCanvas = jest.fn(() => ({\r\n  getContext: mockGetContext,\r\n  toBuffer: mockToBuffer,\r\n}));\r\nconst mockLoadImage = jest.fn(() => Promise.resolve({ width: 800, height: 800 }));\r\n\r\njest.unstable_mockModule('canvas', () => ({\r\n  createCanvas: mockCreateCanvas,\r\n  loadImage: mockLoadImage,\r\n}));\r\n\r\n// Mock fs/promises\r\nconst mockMkdir = jest.fn(() => Promise.resolve());\r\nconst mockWriteFile = jest.fn(() => Promise.resolve());\r\n\r\njest.unstable_mockModule('fs/promises', () => ({\r\n  default: {\r\n    mkdir: mockMkdir,\r\n    writeFile: mockWriteFile,\r\n  },\r\n  mkdir: mockMkdir,\r\n  writeFile: mockWriteFile,\r\n}));\r\n\r\n// Import the module AFTER mocking\r\nconst { generateInfo } = await import('../routes/generator/generate_info.js');\r\n\r\ndescribe('generateInfo', () => {\r\n  let mockFaker;\r\n  \r\n  beforeEach(() => {\r\n    // Reset all mocks before each test\r\n    jest.clearAllMocks();\r\n    mockCreateCanvas.mockClear();\r\n    mockLoadImage.mockClear();\r\n    mockMkdir.mockClear();\r\n    mockWriteFile.mockClear();\r\n    mockGetContext.mockClear();\r\n    mockToBuffer.mockClear();\r\n    \r\n    // Reset mock implementations\r\n    mockLoadImage.mockResolvedValue({ width: 800, height: 800 });\r\n    mockMkdir.mockResolvedValue();\r\n    mockWriteFile.mockResolvedValue();\r\n    mockToBuffer.mockReturnValue(Buffer.from('fake-image-data'));\r\n    \r\n    // Create a fresh mock faker instance\r\n    mockFaker = {\r\n      music: {\r\n        artist: jest.fn(),\r\n        album: jest.fn(),\r\n        genre: jest.fn(),\r\n        songName: jest.fn(),\r\n      },\r\n      person: {\r\n        fullName: jest.fn(),\r\n      },\r\n      number: {\r\n        int: jest.fn(),\r\n      },\r\n      word: {\r\n        noun: jest.fn(),\r\n        adjective: jest.fn(),\r\n        words: jest.fn(),\r\n      },\r\n      company: {\r\n        name: jest.fn(),\r\n      },\r\n      image: {\r\n        avatarGitHub: jest.fn(),\r\n      },\r\n    };\r\n  });\r\n\r\n  afterAll(() => {\r\n    mockDateNow.mockRestore();\r\n  });\r\n\r\n  describe('Happy path - all faker methods work', () => {\r\n    test('should generate complete music info with all faker methods working', async () => {\r\n      mockFaker.music.artist.mockReturnValue('The Beatles');\r\n      mockFaker.music.album.mockReturnValue('Abbey Road');\r\n      mockFaker.music.genre.mockReturnValue('Rock');\r\n      mockFaker.music.songName.mockReturnValue('Come Together');\r\n      mockFaker.company.name.mockReturnValue('Apple Records');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result).toEqual({\r\n        artist: 'The Beatles',\r\n        album: 'Abbey Road',\r\n        genre: 'Rock',\r\n        title: 'Come Together',\r\n        company: 'Apple Records',\r\n        image: expect.stringContaining('/covers/123_1/cover_1234567890.jpg'),\r\n      });\r\n\r\n      expect(mockFaker.music.artist).toHaveBeenCalledTimes(1);\r\n      expect(mockFaker.music.album).toHaveBeenCalledTimes(1);\r\n      expect(mockFaker.music.genre).toHaveBeenCalledTimes(1);\r\n      expect(mockFaker.music.songName).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    test('should generate different paths for different seeds and pages', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result1 = await generateInfo(mockFaker, 111, 1);\r\n      const result2 = await generateInfo(mockFaker, 222, 2);\r\n\r\n      expect(result1.image).toContain('/covers/111_1/');\r\n      expect(result2.image).toContain('/covers/222_2/');\r\n    });\r\n  });\r\n\r\n  describe('Fallback logic - artist generation', () => {\r\n    test('should generate artist from person name when music.artist throws', async () => {\r\n      mockFaker.music.artist.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.person.fullName.mockReturnValue('John Smith');\r\n      mockFaker.number.int.mockReturnValue(2);\r\n      mockFaker.word.noun.mockReturnValueOnce('studio').mockReturnValueOnce('records');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      // Artist should be either \"John Studio Records\" or \"Smith Studio Records\"\r\n      expect(result.artist).toMatch(/^(John|Smith) Studio Records$/);\r\n      expect(mockFaker.person.fullName).toHaveBeenCalled();\r\n      expect(mockFaker.word.noun).toHaveBeenCalledTimes(2);\r\n    });\r\n\r\n    test('should handle person name with fallback to \"Unknown\"', async () => {\r\n      mockFaker.music.artist.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.person.fullName.mockReturnValue(null);\r\n      mockFaker.number.int.mockReturnValue(1);\r\n      mockFaker.word.noun.mockReturnValue('music');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.artist).toContain('Unknown');\r\n    });\r\n\r\n    test('should randomly choose first or last name for artist', async () => {\r\n      mockFaker.music.artist.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.person.fullName.mockReturnValue('Jane Elizabeth Doe');\r\n      mockFaker.number.int.mockReturnValue(1);\r\n      mockFaker.word.noun.mockReturnValue('band');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      // Should be either \"Jane Band\" or \"Doe Band\"\r\n      expect(result.artist).toMatch(/^(Jane|Doe) Band$/);\r\n    });\r\n  });\r\n\r\n  describe('Fallback logic - album generation', () => {\r\n    test('should generate album from nouns when music.album throws', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.number.int\r\n        .mockReturnValueOnce(3) // for album word count\r\n        .mockReturnValueOnce(2); // for title word count\r\n      mockFaker.word.noun\r\n        .mockReturnValueOnce('summer')\r\n        .mockReturnValueOnce('night')\r\n        .mockReturnValueOnce('dreams');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.album).toBe('summer night dreams');\r\n    });\r\n\r\n    test('should handle empty strings from noun generation', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.number.int.mockReturnValue(2);\r\n      // Return empty string - this will create ' ' which is truthy but effectively empty\r\n      mockFaker.word.noun.mockReturnValue('');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      // Current behavior: empty strings joined create ' ' which doesn't trigger fallback\r\n      // This is a limitation of the current implementation\r\n      expect(result.album).toBe(' ');\r\n    });\r\n\r\n    test('should respect TITLE_AND_ALBUM_MIN and TITLE_AND_ALBUM_MAX environment variables', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.number.int.mockReturnValue(2);\r\n      mockFaker.word.noun.mockReturnValue('word');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      await generateInfo(mockFaker, 123, 1);\r\n\r\n      // Check that number.int was called with correct min/max for album\r\n      expect(mockFaker.number.int).toHaveBeenCalledWith(\r\n        expect.objectContaining({ min: expect.any(Number), max: expect.any(Number) })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Fallback logic - genre generation', () => {\r\n    test('should generate genre from adjective when music.genre throws', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.word.adjective.mockReturnValue('electronic');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.genre).toBe('electronic');\r\n      expect(mockFaker.word.adjective).toHaveBeenCalled();\r\n    });\r\n\r\n    test('should use \"Unknown Genre\" when adjective generation fails', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.word.adjective.mockReturnValue(null);\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.genre).toBe('Unknown Genre');\r\n    });\r\n  });\r\n\r\n  describe('Fallback logic - title generation', () => {\r\n    test('should generate title from words when music.songName throws', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.number.int.mockReturnValue(3);\r\n      mockFaker.word.words.mockReturnValue('amazing beautiful melody');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.title).toBe('amazing beautiful melody');\r\n      expect(mockFaker.word.words).toHaveBeenCalledWith(3);\r\n    });\r\n\r\n    test('should use \"Untitled\" when words generation fails', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.number.int.mockReturnValue(2);\r\n      mockFaker.word.words.mockReturnValue(null);\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.title).toBe('Untitled');\r\n    });\r\n  });\r\n\r\n  describe('Image generation', () => {\r\n    test('should create image with correct directory structure', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song Title');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      await generateInfo(mockFaker, 456, 7);\r\n\r\n      expect(mockMkdir).toHaveBeenCalledWith(\r\n        expect.stringContaining('public\\\\covers\\\\456_7'),\r\n        { recursive: true }\r\n      );\r\n    });\r\n\r\n    test('should write image file with correct format', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(mockWriteFile).toHaveBeenCalledWith(\r\n        expect.stringContaining('cover_1234567890.jpg'),\r\n        expect.any(Buffer)\r\n      );\r\n    });\r\n\r\n    test('should load and process the GitHub avatar image', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(mockLoadImage).toHaveBeenCalledWith('https://example.com/avatar.png');\r\n    });\r\n  });\r\n\r\n  describe('Return value structure', () => {\r\n    test('should return object with all required properties', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result).toHaveProperty('artist');\r\n      expect(result).toHaveProperty('album');\r\n      expect(result).toHaveProperty('genre');\r\n      expect(result).toHaveProperty('title');\r\n      expect(result).toHaveProperty('company');\r\n      expect(result).toHaveProperty('image');\r\n    });\r\n\r\n    test('should return proper types for all properties', async () => {\r\n      mockFaker.music.artist.mockReturnValue('Artist');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(typeof result.artist).toBe('string');\r\n      expect(typeof result.album).toBe('string');\r\n      expect(typeof result.genre).toBe('string');\r\n      expect(typeof result.title).toBe('string');\r\n      expect(typeof result.company).toBe('string');\r\n      expect(typeof result.image).toBe('string');\r\n    });\r\n  });\r\n\r\n  describe('Edge cases', () => {\r\n    test('should handle empty string returns from faker', async () => {\r\n      mockFaker.music.artist.mockReturnValue('');\r\n      mockFaker.music.album.mockReturnValue('');\r\n      mockFaker.music.genre.mockReturnValue('');\r\n      mockFaker.music.songName.mockReturnValue('');\r\n      mockFaker.company.name.mockReturnValue('');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      // Should still return valid object even with empty strings\r\n      expect(result).toHaveProperty('artist');\r\n      expect(result).toHaveProperty('album');\r\n      expect(result).toHaveProperty('genre');\r\n      expect(result).toHaveProperty('title');\r\n    });\r\n\r\n    test('should handle single-word person names in fallback', async () => {\r\n      mockFaker.music.artist.mockImplementation(() => {\r\n        throw new Error('Not available');\r\n      });\r\n      mockFaker.person.fullName.mockReturnValue('Madonna');\r\n      mockFaker.number.int.mockReturnValue(1);\r\n      mockFaker.word.noun.mockReturnValue('music');\r\n      mockFaker.music.album.mockReturnValue('Album');\r\n      mockFaker.music.genre.mockReturnValue('Genre');\r\n      mockFaker.music.songName.mockReturnValue('Song');\r\n      mockFaker.company.name.mockReturnValue('Company');\r\n      mockFaker.image.avatarGitHub.mockReturnValue('https://example.com/avatar.png');\r\n\r\n      const result = await generateInfo(mockFaker, 123, 1);\r\n\r\n      expect(result.artist).toBe('Madonna Music');\r\n    });\r\n  });\r\n});\r\n"}},"projectRoot":"C:\\Users\\justa\\Documents\\0x\\Stud\\4th1st\\PSK\\Laborai\\3\\fake_data_app","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","testRunner":"jest","jest":{"projectType":"custom","configFile":"jest.config.js","enableFindRelatedTests":true,"config":{"testEnvironment":"node","transform":{}}},"mutate":["routes/generator/generate_info.js"],"mutator":{"excludedMutations":[],"plugins":null},"coverageAnalysis":"perTest","thresholds":{"high":80,"low":60,"break":null},"reporters":["html","clear-text","progress","json"],"htmlReporter":{"fileName":"mutation-report.html"},"jsonReporter":{"fileName":"mutation-report.json"},"timeoutMS":60000,"timeoutFactor":3,"concurrency":2,"clearTextReporter":{"logTests":false,"maxTestsToLog":3,"allowColor":true,"allowEmojis":false,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"testRunnerNodeArgs":["--experimental-vm-modules"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[]},"framework":{"name":"StrykerJS","version":"9.2.0","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/jest-runner":"9.2.0","jest":"29.7.0"}}}